import input_n
import log
import excep
import summ
import sub
import mult
import div

from time import sleep
import logging
from telegram import __version__ as TG_VER
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters)
 
try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)
if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(f"This example is not compatible with your current PTB version {TG_VER}. To view the "\
        f"{TG_VER} version of this bot, "\
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html")


logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)



reply_keyboard_start = [["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],\
                  ["–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤"],\
                  ["–í—ã—Ö–æ–¥"]]

reply_keyboard_choice_num = [["–¶–µ–ª—ã–µ"],\
                            ["–í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ"],\
                            ["–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ"],\
                            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],\
                            ["–í—ã—Ö–æ–¥"]]

reply_keyboard_action = [["–°—É–º–º–∞"],\
                        ["–í—ã—á–∏—Ç–∞–Ω–∏–µ"],\
                        ["–£–º–Ω–æ–∂–µ–Ω–∏–µ"],\
                        ["–î–µ–ª–µ–Ω–∏–µ"],\
                        ["–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ"],\
                        ["–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è"],\
                        ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],\
                        ["–í—ã—Ö–æ–¥"]]

reply_keyboard_action_comp = [["–°—É–º–º–∞"],\
                            ["–í—ã—á–∏—Ç–∞–Ω–∏–µ"],\
                            ["–£–º–Ω–æ–∂–µ–Ω–∏–µ"],\
                            ["–î–µ–ª–µ–Ω–∏–µ"],\
                            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],\
                            ["–í—ã—Ö–æ–¥"]]

reply_keyboard_next_action = [["–ü—Ä–æ–¥–æ–∂–∏—Ç—å"],\
                            ["–ù–æ–≤—ã–π –≤–≤–æ–¥"],\
                            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],\
                            ["–í—ã—Ö–æ–¥"]]

markup_start = ReplyKeyboardMarkup(reply_keyboard_start, one_time_keyboard=True)
markup_choice_num = ReplyKeyboardMarkup(reply_keyboard_choice_num, one_time_keyboard=True)
markup_action = ReplyKeyboardMarkup(reply_keyboard_action, one_time_keyboard=True)
markup_action_comp = ReplyKeyboardMarkup(reply_keyboard_action_comp, one_time_keyboard=True)
markup_next_action = ReplyKeyboardMarkup(reply_keyboard_next_action, one_time_keyboard=True)


main_menu, numbers_menu, action_menu, next_action, res_action, print_log, end_prog = range(7)


type_menu_1 = 0
type_menu_2 = 0
type_menu_3 = 0
type_menu_4 = 0
answer = 1

async def main_m (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text ('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é\n\
1 - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n 2 - –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω\n 3 - –í—ã—Ö–æ–¥', reply_markup=markup_start)
    global type_menu_1
    type_menu_1 = excep.check_menu(4)
    if type_menu_1 == 1:
        log.universal_logger("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", data_description = "–ó–∞–ø—É—Å–∫")
        return numbers_menu
    elif type_menu_1 == 2:
        log.universal_logger("–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω", data_description = "–ó–∞–ø—É—Å–∫")
        return print_log
    else:
        return end_prog



async def choice_num (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text ('–° –∫–∞–∫–∏–º–∏ —á–∏—Å–ª–∞–º–∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å?\n \
1 - –¶–µ–ª—ã–µ\n 2 - –í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ\n 3 - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ\n 4 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n 5 - –í—ã—Ö–æ–¥',\
    reply_markup=markup_choice_num)
    global type_menu_2
    type_menu_2 = excep.check_menu(6)
    if type_menu_2 == 1:
        log.universal_logger("–¶–µ–ª—ã–µ —á–∏—Å–ª–∞", data_description = "–í—ã–±–æ—Ä")
        return input_n.int_num()
    elif type_menu_2 == 2:
        log.universal_logger("–í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞", data_description = "–í—ã–±–æ—Ä")
        return input_n.float_num()
    elif type_menu_2 == 3:
        log.universal_logger("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞", data_description = "–í—ã–±–æ—Ä")
        return input_n.complex_num()
    elif type_menu_2 == 4:
        log.universal_logger("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data_description = "–í–æ–∑–≤—Ä–∞—Ç")
        return main_menu
    else:
        return end_prog


async def choice_action (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if type(input_n.x)==complex or type(input_n.y)==complex:
        await update.message.reply_text (f'–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å —á–∏—Å–ª–∞–º–∏ \
"{input_n.x}" –∏ "{input_n.y}"?\n\
1 - –°—É–º–º–∞\n 2 - –í—ã—á–∏—Ç–∞–Ω–∏–µ\n 3 - –£–º–Ω–æ–∂–µ–Ω–∏–µ\n 4 - –î–µ–ª–µ–Ω–∏–µ\n\
5 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n 6 - –ù–∞–∑–∞–¥ \n 7 - –í—ã—Ö–æ–¥',\
reply_markup=markup_action_comp)
    else:
        await update.message.reply_text (f'–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å —á–∏—Å–ª–∞–º–∏ \
"{input_n.x}" –∏ "{input_n.y}"?\n\
1 - –°—É–º–º–∞\n 2 - –í—ã—á–∏—Ç–∞–Ω–∏–µ\n 3 - –£–º–Ω–æ–∂–µ–Ω–∏–µ\n 4 - –î–µ–ª–µ–Ω–∏–µ\n\
5 - –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ\n 6 - –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è\n 7 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n 8 - –ù–∞–∑–∞–¥\
\n 9 - –í—ã—Ö–æ–¥', reply_markup=markup_action)
    global type_menu_3
    if type_menu_2 == 3:
        type_menu_3 = excep.check_menu(8)
    else:
        type_menu_3 = excep.check_menu(10)
    if type_menu_3 in range(1,4) or excep.excep_check_zero() is True:
        return res_action
    else:
        return excep.if_zero

async def res_act(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if type_menu_3 == 1:
        result = summ.summ
    elif type_menu_3 == 2:
        result = sub.sub
    elif type_menu_3 == 3:    
        result = mult.mult
    elif type_menu_3 == 4:
        result = div.float_div
    elif type_menu_3 == 5:    
        if type_menu_2 != 3:
            result = div.floor_div
        else:
            log.universal_logger("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data_description = "–í–æ–∑–≤—Ä–∞—Ç")
            return main_menu
    elif type_menu_3 == 6:
        if type_menu_2 != 3:
            result = div.mod_div()
        else:
            log.universal_logger('–ú–µ–Ω—é –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö', data_description = "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥")
            return numbers_menu
    elif type_menu_3 == 7:      
        if type_menu_2 != 3:
            log.universal_logger("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data_description = "–í–æ–∑–≤—Ä–∞—Ç")
            return main_menu
        else:
            return end_prog
    elif type_menu_3 == 8:      
        log.universal_logger('–ú–µ–Ω—é –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö', data_description = "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return numbers_menu
    else:
        return end_prog
    await update.message.reply_text(f'{action(type_menu_3)} —á–∏—Å–µ–ª {input_n.x} –∏ {input_n.y} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {result}')



async def next_act(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ "{input_n.x}" –∏ "{input_n.y}"?\n \
1 - –ü—Ä–æ–¥–æ–∂–∏—Ç—å\n 2 - –ù–æ–≤—ã–π –≤–≤–æ–¥\n 3 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n 4 - –í—ã—Ö–æ–¥',\
 reply_markup=markup_next_action)
    global type_menu_4
    type_menu_4 = excep.check_menu(5)
    if type_menu_4 == 1:
        log.universal_logger((input_n.x, input_n.y), data_description = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
        return action_menu
    elif type_menu_4 == 2:
        log.universal_logger('–ú–µ–Ω—é –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö', data_description = "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return numbers_menu
    elif type_menu_4 == 3:
        log.universal_logger("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", data_description = "–í–æ–∑–≤—Ä–∞—Ç")
        return main_menu
    else:
        return end_prog


def action (ent_menu):
    if type_menu_2 == 3:
        action = {1: "–°—É–º–º–∞", 2: "–†–∞–∑–Ω–æ—Å—Ç—å", 3: "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", 4: "–ß–∞—Å—Ç–Ω–æ–µ"}
    else:
        action = {1: "–°—É–º–º–∞", 2: "–†–∞–∑–Ω–æ—Å—Ç—å", 3: "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", 4: "–ß–∞—Å—Ç–Ω–æ–µ",
                  5: "–ß–∞—Å—Ç–Ω–æ–µ –æ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è", 6: "–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è"}
    return action.get(ent_menu)
    
    
async def ending (update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    log.universal_logger("–ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", data_description = "–í—ã—Ö–æ–¥") 
    user_data = context.user_data
    if "choice" in user_data:
        del user_data["choice"]
    await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    clear_data()
    user_data.clear()
    return ConversationHandler.END


def clear_data():
    global type_menu_1
    type_menu_1 = 0
    global type_menu_2
    type_menu_2 = 0
    global type_menu_3
    type_menu_3 = 0
    global type_menu_4
    type_menu_4 = 0
    global answer
    answer = 1


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    log.universal_logger("–í—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É", data_description = "–ó–∞–ø—É—Å–∫")
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Äüî•')
    sleep(1)
    await update.message.reply_text('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:'),
    return main_menu




def main() -> None:
    application = Application.builder().token("5700119796:AAGgdI8yBQOzkBCRKkAhz4DpxBH6FNxMRFU—Å–¥—É").build()
    conv_handler = ConversationHandler\
        \
        (entry_points=[CommandHandler("start", start)],\
        \
        states={main_menu: [MessageHandler(filters.Regex("^(1|2|3|)$"), main_m)],\
                print_log: [MessageHandler(filters.TEXT & ~(filters.COMMAND), log.print_log)],\
                numbers_menu: [MessageHandler(filters.TEXT & ~(filters.COMMAND), choice_num)],\
                action_menu: [MessageHandler(filters.TEXT & ~(filters.COMMAND), choice_action)],\
                res_action: [MessageHandler(filters.Regex("^–ù–æ–≤–∞—è –∏–≥—Ä–∞$"), res_act)],\
                next_action: [MessageHandler(filters.Regex("^(1|2|3|)$"), next_act)],\
                end_prog: [MessageHandler(filters.Regex("^(1|2|3|)$"), ending)]},\
                
        fallbacks=[MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), ending)])
 
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()